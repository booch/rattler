require 'rattler/grammar'

grammar Rattler::Grammar::Metagrammar

include Rattler::Parsers

%whitespace (SPACE+ | ('#' [^\n]*))* {
  
  grammar         <-  heading rules EOF                                         <Grammar>
  
  heading         <-  requires module_decl? includes                            { heading *_ }
  
  requires        <-  (~`require` literal ~eol)*                                { { :requires => _ } }
  
  module_decl     <-  ~`parser` constant (~'<' constant)? ~eol                  { parser_decl *_ }
                    | ~`grammar` constant ~eol                                  { { :grammar_name => _ } }
  
  includes        <-  (~`include` constant ~eol)*                               { { :includes => _ } }
  
  rules           <-  (directive | rule | block_close)+                         <Rules>
  
  directive       <-  ws_directive | wc_directive
  
  ws_directive    <-  ws_decl ~'{'                                              { start_ws _ }
                    | ws_decl                                                   { set_ws _ }
  
  ws_decl         <-  ~`%whitespace` unattributed
  
  wc_directive    <-  wc_decl ~'{'                                              { start_wc _ }
                    | wc_decl                                                   { set_wc _ }
  
  wc_decl         <-  ~`%word_character` unattributed
  
  block_close     <-  ~'}'                                                      { end_block }
  
  rule            <-  identifier ~'<-' expression                               { rule *_ }
  
  unattributed    <-  unattributed ~'|' terms                                   <Choice>
                    | terms
  
  expression      <-  expression ~'|' attributed                                <Choice>
                    | attributed
  
  attributed      <-  attributed ~'<' dispatch? ~'>'                            <DispatchAction>
                    | attributed ~'{' action ~'}'                               <DirectAction>
                    | terms
  
  dispatch        <-  @(name (~'.' var_name)?)
  
  action          <-  @(('{' [^}]* '}' | [^{}])*)
  
  terms           <-  terms term                                                <Sequence>
                    | term
  
  term            <-  fail_expr | labeled | labelable
  
  fail_expr       <-  (`fail` | `fail_rule` | `fail_parse`) fail_arg            <Fail>
  
  fail_arg        <-  ~'(' literal ~')'
                    | literal
  
  labeled         <-  var_name ~':' labelable                                   <Label>
  
  labelable       <-  list | list_term
  
  list            <-  list_term ~'*^' list_term                                 <List>
                    | list_term ~'+^' list_term                                 <List1>
  
  list_term       <-  prefixed | prefixable
  
  prefixed        <-  ~'&' prefixable                                           <Assert>
                    | ~'!' prefixable                                           <Disallow>
                    | ~'~' prefixable                                           <Skip>
                    | ~'@' prefixable                                           <Token>
  
  prefixable      <-  suffixed | primary
  
  suffixed        <-  primary ~'?'                                              <Optional>
                    | primary ~'*' !'^'                                         <ZeroOrMore>
                    | primary ~'+' !'^'                                         <OneOrMore>
  
  primary         <-  ~'(' expression ~')'
                    | atom
  
  atom            <-  `EOF`                                                     <Eof>
                    | posix_class                                               { posix_class _ }
                    | identifier !'<-'                                          <Apply>
                    | literal                                                   { literal _ }
                    | word_literal                                              { word_literal _ }
                    | class                                                     { char_class _ }
                    | regexp                                                    <Match>
                    | ~'.'                                                      { Match[/./] }
  
  posix_class     <-  `ALNUM`
                    | `ALPHA`
                    | `ASCII`
                    | `BLANK`
                    | `CNTRL`
                    | `DIGIT`
                    | `GRAPH`
                    | `LOWER`
                    | `PRINT`
                    | `PUNCT`
                    | `SPACE`
                    | `UPPER`
                    | `XDIGIT`
                    | `WORD`
  
  literal         <-  /(["'])(?:\\.|(?:(?!\1).))*\1/
  
  word_literal    <-  @("`" ('\\' . | [^`])* "`")
  
  class           <-  @('[' (!']' range)+  ']')
  
  regexp          <-  /\/(?:\\.|[^\/])+\/(?:[iomx]+(?!\w))?/
  
  name            <-  var_name
                    | constant
  
  identifier      <-  !`EOF` @WORD+
  
  var_name        <-  @(LOWER WORD*)
  
  constant        <-  @((const_name '::')* const_name)
  
  const_name      <-  @(UPPER WORD*)
}

  range           <-  @(  '[:' posix_name ':]'
                        | class_char ('-' class_char)?)
  
  posix_name      <-  `alnum`
                    | `alpha`
                    | `ascii`
                    | `blank`
                    | `cntrl`
                    | `digit`
                    | `graph`
                    | `lower`
                    | `print`
                    | `punct`
                    | `space`
                    | `upper`
                    | `xdigit`
                    | `word`
  
  class_char      <-  @(  '\\' [0-3] [0-7] [0-7]
                        | '\\x' XDIGIT XDIGIT
                        | '\\' .
                        | [^\\\]] )
  
  eol             <-  ~(BLANK* (EOF | ';' | ("\r"? "\n") | ('#' [^\n]*)))
